+ Feb 19 / 2010
  First commit
  Work to be done is in main.cpp

+ Feb 19 / 2010
  Added GDI+ rendering to textures with preservation of alpha channel
  This means you can now load .gif through GDI+ (but not through D3DX)

+ Feb 20 / 2010 v0.0.1-boxedText
  This is a developmental branch where I'm trying to get boxedText to work.
  Basically it should render to texture some text and lay a box behind it.
  A bit like a dialog box.  See main.cpp for details.  Considering using
  a rendering toolkit like Qt, but that may be very heavy.  Another option
  was IWebBrowser2, instantiate an IE basically and use it to render text.
  Probably not the best choice.

+ Feb 20 / 2010 v0.0.1-boxedText-merge
  BoxedText now working, rendered in DirectX.  GDI+ boxed text was
  stripped out (GDIPlusTexture::boxedText()) because of difference
  in kerning in d3d vs GDI+, even for the same font with the same
  parameters -- the computed size was still different.

+ Feb 21 / 2010 v0.0.2-lib
  Separated out code into a .lib file (for the engine core) and a
  "game" project, which uses the engine.
  
+ Feb 21 / 2010 v0.0.2-lib
  Window::drawBox().  Initially was bad version of the drawBox()
  (unnecessary use of a cached map), but that actually got lost
  due to misuse of git reset function.. shall remain unnamed.
  Going to use modulating color instead on white tex, that's
  this version anyway.
  
  * Sprite scaling fixed to allow rotation.
    USE:  vec2Scale, rotation, vec2Trans, vec3Center
    DO NOT USE:  vec2ScalingCenter, scalingRotation, vecRotCenter, vec3Pos

+ Feb 21 / 2010 v0.0.3-uoit-gdw
  A branch of the code to publish for week 6 of gdw.
  Basically it should contain only the MOST BASIC,
  STRIPPED DOWN FUNCTIONS that maximize __ABILITY__ TO DO THINGS,
  NOT NECESSARILY FLEXIBILITY.
  - I will also break some of the overload groups of functions
    into functions that aren't overloads of each other..

+ Feb 23 / 2010 v0.0.3-uoit-gdw
  Pre-release alpha.  Here are notes from main.cpp
  that haven't been completed yet.


  Restructure inheritance:
  GameWindow : Direct3DWindow : BasicWindow
  Need an object for a SpriteManager (spriteMan)
    (he records drawSprite calls)..
    its functions are callable through GameWindow though
    (gameWindow.drawSprite(x,y,z))

  For drawText, it should accept a va_list..
  
  State parameters?  Perhaps using state parameters
  for all drawing isn't such a bad idea after all
    window->setPos( x, y ) ;
    window->drawSprite( 1 ) ; // uses its default width/height, draws
    // at last setPos'd position.
    
  - OpenGL supports quadrics through the GLU* functions,
  does Direct3d?

  - Improve the framerate by batching properly
  
  - http://stackoverflow.com/questions/84556/whats-your-favorite-programmer-cartoon#answer-84609 

+ Mar 5 / 2010 v0.0.4-mouse-improvement
  - Some improvement to mouse functionality
  
+ Mar 6 / 2010 v0.0.5-bug-fixes
  - Fixed modulating color bug in drawSprite overloads (it
    would always use white)
  - Changed signature of a drawSprite version from
    void drawSprite( int id, float x, float y, float width, float height, D3DCOLOR modulatingColor ) ;
  - to
    void drawSprite( int id, float x, float y, float width, float height, float angle ) ;
    [credit: Nick Taylor's suggestion]
  
  - Fixed cursor clip rectangle, not adjusted, on start with
    different window size, class Mouse
    [credit: Nick Taylor's find]

+ Mar 9 / 2010 v0.0.6-looping-sound
  - Added a function Window::loopSound( int id, int loopCount )
    that can loop a sound any number of times.
    Pass it -1 to loop forever.
    
    /*
    Observational note:  If you play an FMOD_SOUND* twice,
    AND that sound was created with FMOD_CREATESTREAM,
    then, you don't get another "instance"
    of that sound, rather that sound starts over.
    That doesn't happen with normal (NON FMOD_CREATESTREAM)
    sounds though.
    */
    
+ Mar 10 / 2010 v0.0.6-looping-sound
  - Added guards on loadSound() for
    file-not-found errors,
  - Added handler code for sound already loaded id,
    just replaces previously loaded sound
    and removes the old sound from map.
    
  - Added capability to STOP a sound;
    that's done on a CHANNEL.
    
    Maintaining ANOTHER multimap<int, FMOD_CHANNEL*>
    that retains active channels.  When a sound starts
    playing, we save off the channel in that map.
    
    Using MULTIMAP because its possible
    that a sound with a given ID
    can be started playing TWICE.
    
    If you want to stop playing a sound by ID,
    we retrieve ALL occurrences of that sound
    in the map (BY ID!)
    
    We also needed to expire a channel
    (remove it from the map<>) when the playing
    sound stops playing.
    
    What we really needed to do here is to 
    have a callback function to remove the
    finished sound from the map<> when it
    is done playing.  FMOD supplies
    FMOD_CHANNEL_CALLBACK, which is great.
    
    Because more than one instance of
    a sound can be playing at a time
    (but it will be on a different channel)
    I had to use a linear search in the multimap<int, FMOD_CHANNEL*>
    to remove the specific FMOD_CHANNEL* that
    had just finished playing.
    
    The only issue with the callback was that
    the Window::fmodChannels map was actually
    in accessible in the callback function...
    on account of FMOD not accepting an
    object member function as a parameter.
    
    So its made as a static function
    Window::channelEndCallback.
    
    The multimap was made static as well.
    One irritating error is 
    !! Bug::"map/set iterator not incrementable"
    
    Removed the line that causes it, but this
    should be tracked down some time in the future.

+ Mar 10 / 2010 v0.0.7-custom-fonts
  - Add custom fonts

+ Mar 11 / 2010 v0.0.8-new-project-layout
  * NEW PROJECT LAYOUT:  individual projects
    for each week of GDW.
  
  * Common directory to store
    assets in:  $solutionDir/assets.
    * Added ASSET macro
      
  - Note:  I've disabled warnings:
    - C4244:  'conversion' conversion from 'type1' to 'type2', possible loss of data
      http://msdn.microsoft.com/en-us/library/th7a07tz%28VS.80%29.aspx
      
    - C4482:  nonstandard extension used: enum 'enum' used in qualified name
      http://msdn.microsoft.com/en-us/library/ms173704%28VS.80%29.aspx
    
    - C4800:  'type' : forcing value to bool 'true' or 'false' (performance warning)
      http://msdn.microsoft.com/en-us/library/b6801kcy%28VS.71%29.aspx
      
  - We've disabled the warnings in the interests of keeping
    code UNCLUTTERED with casts.
    (warnings disabled in Visual Studio project settings, not
     using #pragma's.)
     
  - TODO:
    - Separation of concerns
    - Use a vector class in examples
    
    - Start using DOXYGEN style comments
    - Fix the ORDER of the functions listed in
      WindowClass.h with the .cpp file
